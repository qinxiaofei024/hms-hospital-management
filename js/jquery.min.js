/*! jQuery v3.7.1 - Simplified version for local deployment */
(function(global, factory) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) throw new Error("jQuery requires a window with a document");
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    "use strict";
    var document = window.document, version = "3.7.1";
    var jQuery = function(selector, context) { return new jQuery.fn.init(selector, context); };
    jQuery.fn = jQuery.prototype = {
        jquery: version, constructor: jQuery, length: 0,
        toArray: function() { return Array.prototype.slice.call(this); },
        get: function(num) { return num == null ? Array.prototype.slice.call(this) : (num < 0 ? this[num + this.length] : this[num]); },
        eq: function(i) { var len = this.length, j = +i + (i < 0 ? len : 0); return this.pushStack(j >= 0 && j < len ? [this[j]] : []); },
        pushStack: function(elems) { var ret = jQuery.merge(this.constructor(), elems); ret.prevObject = this; return ret; },
        each: function(callback) { return jQuery.each(this, callback); },
        ready: function(fn) { if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement.doScroll)) { window.setTimeout(fn); } else { document.addEventListener("DOMContentLoaded", fn); } return this; }
    };
    jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) return this;
        if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                match = [null, selector, null];
            } else {
                match = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/.exec(selector);
            }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem) { this[0] = elem; this.length = 1; }
                    return this;
                }
            } else if (!context || context.jquery) {
                return (context || jQuery(document)).find(selector);
            } else {
                return this.constructor(context).find(selector);
            }
        } else if (selector.nodeType) {
            this[0] = selector; this.length = 1; return this;
        } else if (typeof selector === "function") {
            return jQuery(document).ready(selector);
        }
        return jQuery.makeArray(selector, this);
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") { deep = target; target = arguments[i] || {}; i++; }
        if (typeof target !== "object" && typeof target !== "function") target = {};
        if (i === length) { target = this; i--; }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    copy = options[name];
                    if (name === "__proto__" || target === copy) continue;
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        src = target[name];
                        if (copyIsArray && !Array.isArray(src)) { clone = []; } else if (!copyIsArray && !jQuery.isPlainObject(src)) { clone = {}; } else { clone = src; }
                        copyIsArray = false; target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) { target[name] = copy; }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        isReady: true,
        isFunction: function(obj) { return typeof obj === "function"; },
        isPlainObject: function(obj) { var proto, Ctor; if (!obj || Object.prototype.toString.call(obj) !== "[object Object]") return false; proto = Object.getPrototypeOf(obj); if (!proto) return true; Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor; return typeof Ctor === "function" && Function.prototype.toString.call(Ctor) === Function.prototype.toString.call(Object); },
        each: function(obj, callback) { var length, i = 0; if (Array.isArray(obj)) { length = obj.length; for (; i < length; i++) { if (callback.call(obj[i], i, obj[i]) === false) break; } } else { for (i in obj) { if (callback.call(obj[i], i, obj[i]) === false) break; } } return obj; },
        merge: function(first, second) { var len = +second.length, j = 0, i = first.length; for (; j < len; j++) { first[i++] = second[j]; } first.length = i; return first; },
        makeArray: function(arr, results) { var ret = results || []; if (arr != null) { if (Array.isArray(arr)) { jQuery.merge(ret, arr); } else { ret.push(arr); } } return ret; },
        parseHTML: function(data, context, keepScripts) { if (typeof data !== "string") return []; if (typeof context === "boolean") { keepScripts = context; context = false; } context = context || document; var parsed = /^<(\w+)\s*\/?>(?:<\/\1>|)$/.exec(data), scripts = !keepScripts && []; if (parsed) return [context.createElement(parsed[1])]; var fragment = context.createDocumentFragment(); var div = context.createElement("div"); div.innerHTML = data; while (div.firstChild) { fragment.appendChild(div.firstChild); } return Array.prototype.slice.call(fragment.childNodes); }
    });
    jQuery.fn.extend({ find: function(selector) { var i, ret = [], len = this.length, self = this; if (typeof selector !== "string") { return this.pushStack(jQuery(selector).filter(function() { for (i = 0; i < len; i++) { if (jQuery.contains(self[i], this)) return true; } })); } for (i = 0; i < len; i++) { jQuery.find(selector, self[i], ret); } ret = this.pushStack(len > 1 ? jQuery.uniqueSort(ret) : ret); ret.selector = this.selector ? this.selector + " " + selector : selector; return ret; } });
    jQuery.find = function(selector, context, results) { results = results || []; context = context || document; if (selector[0] === "#") { var elem = context.getElementById(selector.slice(1)); if (elem) results.push(elem); } else { var nodeList = context.querySelectorAll(selector); for (var i = 0; i < nodeList.length; i++) { results.push(nodeList[i]); } } return results; };
    jQuery.contains = function(a, b) { return a !== b && (a.contains ? a.contains(b) : !!(a.compareDocumentPosition(b) & 16)); };
    jQuery.uniqueSort = function(results) { var elem, duplicates = [], j = 0, i = 0; results.sort(function(a, b) { if (a === b) { duplicates[j++] = i; return 0; } return a.compareDocumentPosition && a.compareDocumentPosition(b) & 4 ? -1 : 1; }); if (duplicates.length) { while (i < duplicates.length) { results.splice(duplicates[i] - i++, 1); } } return results; };
    var $ = jQuery;
    if (typeof noGlobal === "undefined") { window.jQuery = window.$ = jQuery; }
    return jQuery;
});
